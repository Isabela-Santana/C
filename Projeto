#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// para as tarefas , definir a estrutura de um novo no//
// usar uma struct tendo em vista que tudo gira em torna da tarefa//
typedef struct tarefa {
    char nome[30];
    int prioridade;
    int tempo;
    struct tarefa* proxima; // declara um ponteiro que aponta para a proxima tarefa da lista//
} Tarefa; // para usar sem prescisar usar struct tarefa toda vez que prescisar//

// Ponteiro para lista, no primeiro no da lista//
Tarefa* inicio = NULL;

// Pilha para remover tarefas,  //
Tarefa* pilharemover = NULL;

// Função para criar uma nova tarefa, novo no/ adicionar nova tarefa//
Tarefa* criarTarefa(const char* nome, int prioridade, int tempo) {
    Tarefa* nova = (Tarefa*) malloc(sizeof(Tarefa));
    if (nova == NULL) {
        printf("Erro ao alocar memória!\n");
        exit(1);// para terminar na hora , (1) mostra erro//
    }

    int i;
    // para copiar string//   
    for (i = 0; i < 30 && nome[i] != '\0'; i++) {
        nova->nome[i] = nome[i];
    }
    nova->nome[i] = '\0';

    // para inicializar//
    nova->prioridade = prioridade;
    nova->tempo = tempo;
    nova->proxima = NULL;
    return nova;
}

// Adicionar tarefa no final da lista, novo no//
void adicionarTarefa(const char* nome, int prioridade, int tempo) {
    Tarefa* nova = criarTarefa(nome, prioridade, tempo);
    if (inicio == NULL) {
        inicio = nova;
    } else {
        Tarefa* aux = inicio; // aux para nao perder o ponteiro inicial//
        while (aux->proxima != NULL) {
            aux = aux->proxima;
        }
        aux->proxima = nova;
    }
    printf("Tarefa adicionada!\n");
}

// Remover a última tarefa da lista e colocar na pilha para remover, remover do no lista para no pilha//
void removerTarefa() {
    if (inicio == NULL) {
        printf("Nenhuma tarefa para remover.\n");
        return;
    }
    if (inicio->proxima == NULL) {
        // tem só 1 um elemento//
        inicio->proxima = pilharemover;
        pilharemover = inicio;
        inicio = NULL;
    } else {
        Tarefa* aux = inicio;
        while (aux->proxima->proxima != NULL) {
            aux = aux->proxima;
        }
        Tarefa* remover = aux->proxima;
        aux->proxima = NULL;

        remover->proxima = pilharemover;
        pilharemover = remover;
    }
    printf("Última tarefa removida\n");
}




// Função auxiliar para ordenar as tarefas//
void trocarTarefas(Tarefa* a, Tarefa* b) {
    Tarefa temp = *a;
    *a = *b;
    *b = temp;

    // Corrigir os ponteiros proxima, para manter a lista válida//
    Tarefa* aux = a->proxima;
    a->proxima = b->proxima;
    b->proxima = aux;
}

// Ordenar a  lista por tempo (Bubble Sort)//
void ordenarPorTempoBubble() {
    if (inicio == NULL) return;

    int trocou;
    do {
        trocou = 0;
        Tarefa* atual = inicio;
        while (atual->proxima != NULL) {
            if (atual->tempo > atual->proxima->tempo) {
                trocarTarefas(atual, atual->proxima);
                trocou = 1;
            }
            atual = atual->proxima;
        }
    } while (trocou);
}
// vai inserir de forma ordenada em uma nova lista//
void ordenarPorPrioridadeInsertion() {
    Tarefa* sorted = NULL; // nova lista ordenada//
// cria nova lista sortedd//
    while (inicio != NULL) {
        Tarefa* atual = inicio;
        inicio = inicio->proxima;
			// || significa ou //
        if (sorted == NULL || atual->prioridade < sorted->prioridade) {
            atual->proxima = sorted;
            sorted = atual;
        } else {
            Tarefa* aux = sorted;
            while (aux->proxima != NULL && aux->proxima->prioridade <= atual->prioridade) {
                aux = aux->proxima;
            }
            atual->proxima = aux->proxima;
            aux->proxima = atual;
        }
    }

    inicio = sorted;
}
// o menor move para nova lista//
void ordenarPorNomeSelection() {
    Tarefa* novaLista = NULL;

    while (inicio != NULL) {
        Tarefa* menor = inicio;
        Tarefa* anteriorMenor = NULL;
        Tarefa* atual = inicio;
        Tarefa* anteriorAtual = NULL;

        // Busca o nó com o menor nome//
        while (atual != NULL) {
            if (strcmp(atual-> nome ,  menor-> nome) <0) {
                menor = atual;
                anteriorMenor = anteriorAtual;
            }
            anteriorAtual = atual;
            atual = atual->proxima;
        }

        // Remover o menor da lista original//
        if (anteriorMenor == NULL) {
            inicio = menor->proxima;
        } else {
            anteriorMenor->proxima = menor->proxima;
        }

        // Inserir no final da nova lista ordenada//
        menor->proxima = NULL;
        if (novaLista == NULL) {
            novaLista = menor;
        } else {
            Tarefa* aux = novaLista;
            while (aux->proxima != NULL) aux = aux->proxima;
            aux->proxima = menor;
        }
    }

    inicio = novaLista;
}


// Função para exibir as tarefas//
void exibirTarefas() {
    if (inicio == NULL) {
        printf("Nenhuma tarefa para exibir.\n");
        return;
    }
    Tarefa* aux = inicio;
    while (aux != NULL) {
        printf("Nome: %s Prioridade: %d  Tempo: %d min\n", aux->nome, aux->prioridade, aux->tempo);
        aux = aux->proxima;
    }
}

// Menu principal//
int main() {
    int opcao;
    char nome[30];
    int prioridade, tempo;

    do {
        printf("\n\n**** Gerenciador de Tarefas *****\n\n");
        printf("\n -[1 prioridade maxima, 2 rasoavel, 3 indiferente, 4 pouca prioridade, 5 prioridade minima.]-\n\n");
        printf("\n 1: Adicionar tarefa\n");
        printf("\n 2: Exibir tarefas\n");
        printf("\n 3: Remover ultima tarefa\n");
        printf("\n 4: Ordenar tarefas por tempo Bubble Sort  (Do menor para o maior tempo).\n");
		printf("\n 5: Ordenar tarefas por prioridade Insertion Sort (1-5).\n");
		printf("\n 6: Ordenar tarefas por nome em ordem alfabetica SelectionSort.\n");
        printf("\n 0: Sair\n");
        printf("\n Escolha: ");
        scanf("%d", &opcao);
        getchar();


		switch(opcao){
		case 1:
			printf("Nome:\n");
			
			fgets(nome,sizeof(nome),stdin);
			printf("Prioridade(1-5):\n");
			scanf("%d",&prioridade);
			printf("Tempo estimado(min):\n");
			scanf("%d",&tempo);
			getchar();
			adicionarTarefa(nome,prioridade,tempo);
			break;
		
		case 2:
			exibirTarefas();
			break;
		
		case 3 :
			removerTarefa();
			break;
	
		case 4:
    		ordenarPorTempoBubble();
   			printf("Tarefas ordenadas (Bubble).\n");
    		break;
    		
		case 5:
   		 	ordenarPorPrioridadeInsertion();
    		printf("Tarefas ordenadas (Insertion).\n");
   		 	break;
   		 	
		case 6:	
			ordenarPorNomeSelection();			
    		printf("Tarefas ordenadas (Selection).\n");
    		break;
    		
		case 0:
			printf("Saindo.\n");
			break;
	
		default:
			printf("Opcao invalida!\n");
		
		
		}
	} while (opcao !=0);
}
